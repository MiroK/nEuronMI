SetFactory("OpenCASCADE");

// Cylinders
Macro CySegment // (--)
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cylinder(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, rad};
  // Balls to make joints
  ball0 = newv;
  Sphere(ball0) = {base_x, base_y, base_z, rad};

  ball1 = newv;
  Sphere(ball1) = {base_x+dir_x, base_y+dir_y, base_z+dir_z, rad};
  
  // The jointed cone
  cball0() = BooleanDifference {Volume{ball0}; Delete; }{Volume{cone}; };
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone}; };

  union() = BooleanUnion {Volume{cone}; Delete;}{Volume{cball0, cball1}; };
  Delete { Volume{cball0()}; }
  Delete { Volume{cball1()}; }

  segments[index] = union;
  index += 1;
  Return 

  
Macro ClosedCySegment // [--)
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cylinder(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, rad};
  // End Ball to make joints
  ball1 = newv;
  Sphere(ball1) = {base_x+dir_x, base_y+dir_y, base_z+dir_z, rad};
  
  // The jointed cone
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone};};

  union() = BooleanUnion {Volume{cball1}; Delete;}{Volume{cone}; Delete;};
  segments[index] = union;
  index += 1;
  Return 

Macro CySegmentClosed // (--]
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cylinder(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, rad};
  // End Ball to make joints
  ball1 = newv;
  Sphere(ball1) = {base_x, base_y, base_z, rad};
  
  // The jointed cone
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone}; };

  union() = BooleanUnion {Volume{cone}; Delete;}{Volume{cball1}; Delete;};
  
  segments[index] = union;
  index += 1;
  Return

Macro ClosedCySegmentClosed // [--]
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cylinder(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, rad};
  
  segments[index] = cone;
  index += 1;
  Return 


// Cones
Macro Segment // (--)
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cone(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, base_rad, top_rad};
  // Balls to make joints
  ball0 = newv;
  Sphere(ball0) = {base_x, base_y, base_z, base_rad};

  ball1 = newv;
  Sphere(ball1) = {base_x+dir_x, base_y+dir_y, base_z+dir_z, top_rad};
  
  // The jointed cone
  cball0() = BooleanDifference {Volume{ball0}; Delete; }{Volume{cone}; };
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone}; };

  union() = BooleanUnion {Volume{cone}; Delete;}{Volume{cball0, cball1}; };
  Delete { Volume{cball0()}; }
  Delete { Volume{cball1()}; }

  segments[index] = union;
  index += 1;
  Return 

  
Macro ClosedSegment // [--)
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cone(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, base_rad, top_rad};
  // End Ball to make joints
  ball1 = newv;
  Sphere(ball1) = {base_x+dir_x, base_y+dir_y, base_z+dir_z, top_rad};
  
  // The jointed cone
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone};};

  union() = BooleanUnion {Volume{cball1}; Delete;}{Volume{cone}; Delete;};
  segments[index] = union;
  index += 1;
  Return 

Macro SegmentClosed // (--]
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cone(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, base_rad, top_rad};
  // End Ball to make joints
  ball1 = newv;
  Sphere(ball1) = {base_x, base_y, base_z, base_rad};
  
  // The jointed cone
  cball1() = BooleanDifference {Volume{ball1}; Delete; }{Volume{cone}; };

  union() = BooleanUnion {Volume{cone}; Delete;}{Volume{cball1}; Delete;};
  
  segments[index] = union;
  index += 1;
  Return 


Macro ClosedSegmentClosed // [--]
  // It is assumed that all the vars are in the namespace
  cone = newv;
  Cone(cone) = {base_x, base_y, base_z, dir_x, dir_y, dir_z, base_rad, top_rad};
  
  segments[index] = cone;
  index += 1;
  Return 
