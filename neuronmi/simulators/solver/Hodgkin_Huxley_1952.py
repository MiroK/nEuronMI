
"""This module contains a Hodgkin_Huxley_1952 cardiac cell model

The module was autogenerated from a gotran ode file
"""
from __future__ import division
from collections import OrderedDict
import ufl

from cbcbeat.dolfinimport import *
from cbcbeat.cellmodels import CardiacCellModel

class Hodgkin_Huxley_1952(CardiacCellModel):
    def __init__(self, params=None, init_conditions=None):
        """
        Create cardiac cell model

        *Arguments*
         params (dict, :py:class:`dolfin.Mesh`, optional)
           optional model parameters
         init_conditions (dict, :py:class:`dolfin.Mesh`, optional)
           optional initial conditions
        """
        CardiacCellModel.__init__(self, params, init_conditions)

    @staticmethod
    def default_parameters():
        "Set-up and return default parameters."
        params = OrderedDict([("g_Na", 120),
                              ("g_K", 36),
                              ("g_L", 0.3),
                              ("Cm", 1),
                              ("E_R", 0)])
        return params

    @staticmethod
    def default_initial_conditions():
        "Set-up and return default initial conditions."
        ic = OrderedDict([("V", 0),
                          ("m", 0.05),
                          ("h", 0.6),
                          ("n", 0.325)])
        return ic

    def _I(self, v, s, time):
        """
        Original gotran transmembrane current dV/dt
        """
        time = time if time else Constant(0.0)

        # Assign states
        V = v
        assert(len(s) == 3)
        m, h, n = s

        # Assign parameters
        g_Na = self._parameters["g_Na"]
        g_K = self._parameters["g_K"]
        g_L = self._parameters["g_L"]
        Cm = self._parameters["Cm"]
        E_R = self._parameters["E_R"]

        # Init return args
        current = [ufl.zero()]*1

        # Expressions for the Sodium channel component
        E_Na = -115 + E_R
        i_Na = g_Na*(m*m*m)*(-E_Na + V)*h

        # Expressions for the Potassium channel component
        E_K = 12 + E_R
        i_K = g_K*ufl.elem_pow(n, 4)*(-E_K + V)

        # Expressions for the Leakage current component
        E_L = -10.613 + E_R
        i_L = g_L*(-E_L + V)

        # Expressions for the Membrane component
        i_Stim = ufl.conditional(ufl.And(ufl.ge(time, 10), ufl.le(time,\
            10.5)), -20, 0)
        current[0] = (-i_K - i_L - i_Na + i_Stim)/Cm

        # Return results
        return current[0]

    def I(self, v, s, time=None):
        """
        Transmembrane current

           I = -dV/dt

        """
        return -self._I(v, s, time)

    def F(self, v, s, time=None):
        """
        Right hand side for ODE system
        """
        time = time if time else Constant(0.0)

        # Assign states
        V = v
        assert(len(s) == 3)
        m, h, n = s

        # Assign parameters

        # Init return args
        F_expressions = [ufl.zero()]*3

        # Expressions for the m gate component
        alpha_m = (2.5 + 0.1*V)/(-1 + ufl.exp(5/2 + V/10))
        beta_m = 4*ufl.exp(V/18)
        F_expressions[0] = (1 - m)*alpha_m - beta_m*m

        # Expressions for the h gate component
        alpha_h = 0.07*ufl.exp(V/20)
        beta_h = 1.0/(1 + ufl.exp(3 + V/10))
        F_expressions[1] = (1 - h)*alpha_h - beta_h*h

        # Expressions for the n gate component
        alpha_n = (0.1 + 0.01*V)/(-1 + ufl.exp(1 + V/10))
        beta_n = 0.125*ufl.exp(V/80)
        F_expressions[2] = (1 - n)*alpha_n - beta_n*n

        # Return results
        return dolfin.as_vector(F_expressions)

    def num_states(self):
        return 3

    def __str__(self):
        return 'Hodgkin_Huxley_1952 cardiac cell model'
